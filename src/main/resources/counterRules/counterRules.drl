//created on: Aug 12, 2018
package counterRules;

//list any import classes here.
import java.lang.System;

import com.lol.facts.PlayerPicksFirst;
import com.lol.facts.AllChampionsAndRoles;

import com.lol.model.ChampionRolesEnum;
import com.lol.model.MapPositionsEnum;
import com.lol.model.TeamTypesEnum;
import com.lol.model.champions.Champion;
import com.lol.model.champions.Stats;
import com.lol.model.champions.ChampionsAndRoles;
import com.lol.model.championMastery.ChampionMasteryDto;
import com.lol.model.recommendation.PlayerGenerativeData;
import com.lol.requestSender.ChampionMasteryRequestSender;
import com.lol.model.summoner.SummonerDto;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.lang.Number;

import com.lol.util.Utils; 
//declare any global variables here
global List<Champions> recommendations;
global ChampionMasteryRequestSender championMasteryRequestSender;
global List<ChampionsAndRoles> allChampions;
global Utils utils;

rule "If player has first pick, recommend his best for that position"
	no-loop
    when
        PlayerGenerativeData(firstPick == TeamTypesEnum.FRIENDLY && playerPosition == friendlyTeamPositionOrder[0])
        $summoner: SummonerDto()
        $allChampions: AllChampionsAndRoles(allChampions.size > 0)
    then
        List<ChampionMasteryDto> champsWithExp = championMasteryRequestSender.sendRequest($summoner.getId());
        List<ChampionsAndRoles> extractedChamps = new ArrayList<ChampionsAndRoles>();
        PlayerPicksFirst fact = new PlayerPicksFirst();
        
        for(ChampionMasteryDto cm : champsWithExp) {
        	if(cm.getChampionLevel() > 2) {
        		for(ChampionsAndRoles champ : $allChampions.getAllChampions()) {
        			if(champ.getChampion().getId() == cm.getChampionId()) {
        				extractedChamps.add(champ);
        			}
        		}
        	}
        }
        
        System.out.println("If player has first pick, recommend his best for that position");
        fact.setChamps(extractedChamps);
        insert(fact);
        update(fact);
end

rule "Player plays a position that enemy team hasn't covered"
	when
		$playerData: PlayerGenerativeData($position: playerPosition)
		$summoner: SummonerDto()
		$ac: AllChampionsAndRoles($allChampions: allChampions)
		Number(intValue == 0) from accumulate(
			ChampionsAndRoles(playedPositions contains $position) 
				from $playerData.opponentTeam,
				init(int count = 0;),
				action(count++;),
				reverse(count--;),
				result(count)
			)
	then
		System.out.println("Player plays a position that enemy team hasn't covered");
		List<ChampionMasteryDto> champsWithExp = championMasteryRequestSender.sendRequest($summoner.getId());
        List<ChampionsAndRoles> extractedChamps = new ArrayList<ChampionsAndRoles>();
        PlayerPicksFirst fact = new PlayerPicksFirst();
        
        for(ChampionMasteryDto cm : champsWithExp) {
        	if(cm.getChampionLevel() > 2) {
        		for(ChampionsAndRoles champ : $ac.getAllChampions()) {
        			if(champ.getChampion().getId() == cm.getChampionId()) {
        				extractedChamps.add(champ);
        			}
        		}
        	}
        }
        
        fact.setChamps(extractedChamps);
        insert(fact);
        update(fact);
end
		 
rule "Get champions played for player position"
	when
		$playerData: PlayerGenerativeData()
		$extractedChamps: PlayerPicksFirst(champs.size > 0)
	then
		System.out.println("Get champions played for player position");
		for(ChampionsAndRoles champ : $extractedChamps.getChamps()) {
			if(champ.getPlayedPositions().contains($playerData.getPlayerPosition())) {
				recommendations.add(champ.getChampion());
			}
		}
end

rule "Player plays bottom, oponnents picked a marksman"
	no-loop
	when
		$playerData: PlayerGenerativeData(playerPosition == MapPositionsEnum.BOTTOM)
		$enemyMarksman: ChampionsAndRoles(playedPositions contains MapPositionsEnum.BOTTOM && playedPositions.size == 1,
						  				  $enemyStats: champion.stats) from $playerData.opponentTeam
		AllChampionsAndRoles($allChampions: allChampions)
		accumulate(
			ChampionsAndRoles(
				$champion: champion,
				$stats: champion.stats,
				playedPositions contains MapPositionsEnum.BOTTOM && name != $enemyMarksman.name 
				&& utils.isAdcEligible($champion, $enemyMarksman.getChampion())
			) from $allChampions,
			$list: collectList($champion)) 
	then
		System.out.println("Player plays bottom, oponnents picked a marksman");
		recommendations.addAll($list);
end

rule "Player plays top, oponnents have a top SPECIALIST -> JUGGERNAUT/SKRIMISHER"
	no-loop
	when
		$playerData: PlayerGenerativeData(playerPosition == MapPositionsEnum.TOP)
		not ChampionsAndRoles(playedPositions contains MapPositionsEnum.TOP && 
							  subroles contains ChampionRolesEnum.SPECIALIST) from $playerData.opponentTeam
		$enemyChamp: ChampionsAndRoles(playedPositions contains MapPositionsEnum.TOP && 
										subroles contains ChampionRolesEnum.BATTLEMAGE,
						  				  $enemyStats: champion.stats) from $playerData.opponentTeam
		AllChampionsAndRoles($allChampions: allChampions)
		accumulate(
			ChampionsAndRoles(
				$champion: champion,
				$stats: champion.stats,
				playedPositions contains MapPositionsEnum.TOP && name != $enemyChamp.name && 
				(subroles contains ChampionRolesEnum.JUGGERNAUT || subroles contains ChampionRolesEnum.SKRIMISHER)
			) from $allChampions,
			$list: collectList($champion)) 
	then
		System.out.println("Player plays top, oponnents have a top SPECIALIST -> DIVER-VANGUARD");
		recommendations.addAll($list);
end

rule "Player plays top, oponnents have a top battlemage, and no tanks/fighters -> DIVER-VANGUARD"
	no-loop
	when
		$playerData: PlayerGenerativeData(playerPosition == MapPositionsEnum.TOP)
		not ChampionsAndRoles(playedPositions contains MapPositionsEnum.TOP && subroles contains ChampionRolesEnum.VANGUARD
							&& mainRole contains ChampionRolesEnum.FIGHTER) from $playerData.opponentTeam
		$enemyChamp: ChampionsAndRoles(playedPositions contains MapPositionsEnum.TOP && 
										subroles contains ChampionRolesEnum.BATTLEMAGE,
						  				  $enemyStats: champion.stats) from $playerData.opponentTeam
		AllChampionsAndRoles($allChampions: allChampions)
		accumulate(
			ChampionsAndRoles(
				$champion: champion,
				$stats: champion.stats,
				playedPositions contains MapPositionsEnum.TOP && name != $enemyChamp.name && 
				(subroles contains ChampionRolesEnum.DIVER || subroles contains ChampionRolesEnum.VANGUARD)
			) from $allChampions,
			$list: collectList($champion)) 
	then
		System.out.println("Player plays top, oponnents have a top battlemage, and no tanks/fighters -> DIVER-VANGUARD");
		recommendations.addAll($list);
end

rule "Player plays top, oponnents have a top skrimisher and no more tops -> SPECIALIST/ DIVER(TOP)/ JUGGERNAUT(TOP) "
	no-loop
	when
		$playerData: PlayerGenerativeData(playerPosition == MapPositionsEnum.TOP)
		not ChampionsAndRoles(playedPositions contains MapPositionsEnum.TOP) from $playerData.opponentTeam
		$enemyChamp: ChampionsAndRoles(playedPositions contains MapPositionsEnum.TOP && subroles contains ChampionRolesEnum.SKRIMISHER,
						  				  $enemyStats: champion.stats) from $playerData.opponentTeam
		AllChampionsAndRoles($allChampions: allChampions)
		accumulate(
			ChampionsAndRoles(
				$champion: champion,
				$stats: champion.stats,
				name != $enemyChamp.name && playedPositions contains MapPositionsEnum.TOP &&
				(subroles contains ChampionRolesEnum.SPECIALIST ||
				 (subroles contains ChampionRolesEnum.DIVER && playedPositions.size() == 1) ||
				 (subroles contains ChampionRolesEnum.JUGGERNAUT && playedPositions.size() == 1))
			) from $allChampions,
			$list: collectList($champion)) 
	then
		System.out.println("Player plays top, oponnents have a top skrimisher and no more tops -> SPECIALIST/ DIVER(TOP)/ JUGGERNAUT(TOP) ");
		recommendations.addAll($list);
end

rule "Player plays top, oponnents have a TOP ONLY DIVER/JUGGERNAUT - SPECIALIST/VANGUARD "
	no-loop
	when
		$playerData: PlayerGenerativeData(playerPosition == MapPositionsEnum.TOP)
		$enemyChamp: ChampionsAndRoles(playedPositions contains MapPositionsEnum.TOP && 
										(subroles contains ChampionRolesEnum.DIVER ||
										subroles contains ChampionRolesEnum.JUGGERNAUT),
						  				  $enemyStats: champion.stats) from $playerData.opponentTeam
		AllChampionsAndRoles($allChampions: allChampions)
		accumulate(
			ChampionsAndRoles(
				$champion: champion,
				$stats: champion.stats,
				name != $enemyChamp.name && playedPositions contains MapPositionsEnum.TOP &&
				(subroles contains ChampionRolesEnum.SPECIALIST || subroles contains ChampionRolesEnum.VANGUARD)
			) from $allChampions,
			$list: collectList($champion)) 
	then
		System.out.println("Player plays top, oponnents have a TOP ONLY DIVER/JUGGERNAUT - SPECIALIST/VANGUARD ");
		recommendations.addAll($list);
end

rule "Player plays top, oponnents have a TOP MARKSMAN - MAGES/ASSASSINS "
	no-loop
	when
		$playerData: PlayerGenerativeData(playerPosition == MapPositionsEnum.TOP)
		not ChampionsAndRoles(playedPositions contains MapPositionsEnum.TOP && 
							!(mainRole contains ChampionRolesEnum.MARKSMAN)) from $playerData.opponentTeam
		$enemyChamp: ChampionsAndRoles(playedPositions contains MapPositionsEnum.TOP && 
										(mainRole contains ChampionRolesEnum.MARKSMAN),
						  				  $enemyStats: champion.stats) from $playerData.opponentTeam
		AllChampionsAndRoles($allChampions: allChampions)
		accumulate(
			ChampionsAndRoles(
				$champion: champion,
				$stats: champion.stats,
				name != $enemyChamp.name && playedPositions contains MapPositionsEnum.TOP &&
				(mainRole contains ChampionRolesEnum.MAGE || subroles contains ChampionRolesEnum.ASSASSIN)
			) from $allChampions,
			$list: collectList($champion)) 
	then
		System.out.println("Player plays top, oponnents have a TOP MARKSMAN - MAGES/ASSASSINS ");
		recommendations.addAll($list);
end

rule "Player Support, opponents have SPECIALIST support -> CATCHER/VANGUARD"
	no-loop
	when
		$playerData: PlayerGenerativeData(playerPosition == MapPositionsEnum.SUPPORT)
		$enemyChamp: ChampionsAndRoles(playedPositions contains MapPositionsEnum.SUPPORT &&
										subroles contains ChampionRolesEnum.SPECIALIST,
						  				  $enemyStats: champion.stats) from $playerData.opponentTeam
		AllChampionsAndRoles($allChampions: allChampions)
		accumulate(
			ChampionsAndRoles(
				$champion: champion,
				$stats: champion.stats,
				name != $enemyChamp.name && playedPositions contains MapPositionsEnum.SUPPORT &&
				(subroles contains ChampionRolesEnum.CATCHER || subroles contains ChampionRolesEnum.VANGUARD)
			) from $allChampions,
			$list: collectList($champion)) 
	then
		System.out.println("Player Support, opponents have SPECIALIST support -> CATCHER/VANGUARD");
		recommendations.addAll($list);
end

rule "Player Support, opponents have MAGE CONTROLLER support -> ENCHANTER/CATCHER/VANGUARD"
	no-loop
	when
		$playerData: PlayerGenerativeData(playerPosition == MapPositionsEnum.SUPPORT)
		$enemyChamp: ChampionsAndRoles(playedPositions contains MapPositionsEnum.SUPPORT && 
										mainRole contains ChampionRolesEnum.MAGE && 
										mainRole contains ChampionRolesEnum.CONTROLLER,
						  				  $enemyStats: champion.stats) from $playerData.opponentTeam
		AllChampionsAndRoles($allChampions: allChampions)
		accumulate(
			ChampionsAndRoles(
				$champion: champion,
				$stats: champion.stats,
				name != $enemyChamp.name && playedPositions contains MapPositionsEnum.SUPPORT &&
				(subroles contains ChampionRolesEnum.ENCHANTER || 
				 subroles contains ChampionRolesEnum.CATCHER || 
				 subroles contains ChampionRolesEnum.VANGUARD)
			) from $allChampions,
			$list: collectList($champion)) 
	then
		System.out.println("Player Support, opponents have MAGE CONTROLLER support -> ENCHANTER/CATCHER/VANGUARD");
		recommendations.addAll($list);
end

rule "Player Support, opponents have ENCHANTER CONTROLLER support -> CATCHER/VANGUARD"
	no-loop
	when
		$playerData: PlayerGenerativeData(playerPosition == MapPositionsEnum.SUPPORT)
		$enemyChamp: ChampionsAndRoles(playedPositions contains MapPositionsEnum.SUPPORT &&
										subroles contains ChampionRolesEnum.ENCHANTER,
						  				  $enemyStats: champion.stats) from $playerData.opponentTeam
		AllChampionsAndRoles($allChampions: allChampions)
		accumulate(
			ChampionsAndRoles(
				$champion: champion,
				$stats: champion.stats,
				name != $enemyChamp.name && playedPositions contains MapPositionsEnum.SUPPORT &&
				(subroles contains ChampionRolesEnum.CATCHER || 
				 subroles contains ChampionRolesEnum.VANGUARD)
			) from $allChampions,
			$list: collectList($champion)) 
	then
		System.out.println("Player Support, opponents have ENCHANTER CONTROLLER support -> CATCHER/VANGUARD");
		recommendations.addAll($list);
end

rule "Player Support, opponents have CATCHER support -> WARDEN/VANGUARD"
	no-loop
	when
		$playerData: PlayerGenerativeData(playerPosition == MapPositionsEnum.SUPPORT)
		$enemyChamp: ChampionsAndRoles(playedPositions contains MapPositionsEnum.SUPPORT && 
										subroles contains ChampionRolesEnum.CATCHER,
						  				  $enemyStats: champion.stats) from $playerData.opponentTeam
		AllChampionsAndRoles($allChampions: allChampions)
		accumulate(
			ChampionsAndRoles(
				$champion: champion,
				$stats: champion.stats,
				name != $enemyChamp.name && playedPositions contains MapPositionsEnum.SUPPORT &&
				(subroles contains ChampionRolesEnum.WARDEN || 
				 subroles contains ChampionRolesEnum.VANGUARD)
			) from $allChampions,
			$list: collectList($champion)) 
	then
		System.out.println("Player Support, opponents have CATCHER support -> WARDEN/VANGUARD");
		recommendations.addAll($list);
end

rule "Player Support, opponents have WARDEN support -> MAGE CONTROLLER"
	no-loop
	when
		$playerData: PlayerGenerativeData(playerPosition == MapPositionsEnum.SUPPORT)
		$enemyChamp: ChampionsAndRoles(playedPositions contains MapPositionsEnum.SUPPORT && 
										subroles contains ChampionRolesEnum.WARDEN,
						  				  $enemyStats: champion.stats) from $playerData.opponentTeam
		AllChampionsAndRoles($allChampions: allChampions)
		accumulate(
			ChampionsAndRoles(
				$champion: champion,
				$stats: champion.stats,
				name != $enemyChamp.name && playedPositions contains MapPositionsEnum.SUPPORT &&
				(mainRole contains ChampionRolesEnum.MAGE && 
				 mainRole contains ChampionRolesEnum.CONTROLLER)
			) from $allChampions,
			$list: collectList($champion)) 
	then
		System.out.println("Player Support, opponents have WARDEN support -> MAGE CONTROLLER");
		recommendations.addAll($list);
end

rule "Player plays JUNGLE, oponnents have a SPECIALIST - SLAYER/TANK-VANGUARD "
	no-loop
	when
		$playerData: PlayerGenerativeData(playerPosition == MapPositionsEnum.JUNGLE)
		$enemyChamp: ChampionsAndRoles(playedPositions contains MapPositionsEnum.JUNGLE && 
										mainRole contains ChampionRolesEnum.SPECIALIST,
						  				  $enemyStats: champion.stats) from $playerData.opponentTeam
		AllChampionsAndRoles($allChampions: allChampions)
		accumulate(
			ChampionsAndRoles(
				$champion: champion,
				$stats: champion.stats,
				name != $enemyChamp.name && playedPositions contains MapPositionsEnum.JUNGLE &&
				(mainRole contains ChampionRolesEnum.SLAYER || subroles contains ChampionRolesEnum.VANGUARD)
			) from $allChampions,
			$list: collectList($champion)) 
	then
		System.out.println("Player plays JUNGLE, oponnents have a jungle SPECIALIST - SLAYER/ TANK-VANGUARD ");
		recommendations.addAll($list);
end

rule "Player plays JUNGLE, oponnents have a jungle TANK - DIVER "
	no-loop
	when
		$playerData: PlayerGenerativeData(playerPosition == MapPositionsEnum.JUNGLE)
		$enemyChamp: ChampionsAndRoles(playedPositions contains MapPositionsEnum.JUNGLE && 
										mainRole contains ChampionRolesEnum.TANK,
						  				  $enemyStats: champion.stats) from $playerData.opponentTeam
		AllChampionsAndRoles($allChampions: allChampions)
		accumulate(
			ChampionsAndRoles(
				$champion: champion,
				$stats: champion.stats,
				name != $enemyChamp.name && playedPositions contains MapPositionsEnum.JUNGLE &&
				subroles contains ChampionRolesEnum.DIVER
			) from $allChampions,
			$list: collectList($champion))
	then
		System.out.println("Player plays JUNGLE, oponnents have a jungle TANK - Mage Jungle");
		recommendations.addAll($list);
end

rule "Player plays JUNGLE, oponnents have a jungle DIVER/JUGGERNAUT - SPECIALIST/VANGUARD "
	no-loop
	when
		$playerData: PlayerGenerativeData(playerPosition == MapPositionsEnum.JUNGLE)
		$enemyChamp: ChampionsAndRoles(playedPositions contains MapPositionsEnum.JUNGLE && 
										(subroles contains ChampionRolesEnum.DIVER ||
										subroles contains ChampionRolesEnum.JUGGERNAUT),
						  				  $enemyStats: champion.stats) from $playerData.opponentTeam
		AllChampionsAndRoles($allChampions: allChampions)
		accumulate(
			ChampionsAndRoles(
				$champion: champion,
				$stats: champion.stats,
				name != $enemyChamp.name && playedPositions contains MapPositionsEnum.JUNGLE &&
				(subroles contains ChampionRolesEnum.SPECIALIST || subroles contains ChampionRolesEnum.VANGUARD)
			) from $allChampions,
			$list: collectList($champion)) 
	then
		System.out.println("Player plays JUNGLE, oponnents have a jungle DIVER/JUGGERNAUT - SPECIALIST/VANGUARD ");
		recommendations.addAll($list);
end

rule "Player plays JUNGLE, oponnents have a JUNGLE MARKSMAN - MAGES/ASSASSINS "
	no-loop
	when
		$playerData: PlayerGenerativeData(playerPosition == MapPositionsEnum.JUNGLE)
		ChampionsAndRoles(playedPositions contains MapPositionsEnum.BOTTOM && 
							mainRole contains ChampionRolesEnum.MARKSMAN) from $playerData.opponentTeam
		$enemyChamp: ChampionsAndRoles(playedPositions contains MapPositionsEnum.TOP && 
										(mainRole contains ChampionRolesEnum.MARKSMAN),
						  				  $enemyStats: champion.stats) from $playerData.opponentTeam
		AllChampionsAndRoles($allChampions: allChampions)
		accumulate(
			ChampionsAndRoles(
				$champion: champion,
				$stats: champion.stats,
				name != $enemyChamp.name && playedPositions contains MapPositionsEnum.JUNGLE &&
				(mainRole contains ChampionRolesEnum.MAGE || subroles contains ChampionRolesEnum.ASSASSIN)
			) from $allChampions,
			$list: collectList($champion)) 
	then
		System.out.println("Player plays JUNGLE, oponnents have a JUNGLE MARKSMAN - MAGES/ASSASSINS ");
		recommendations.addAll($list);
end

rule "Player plays JUNGLE, oponnents have a SLAYER JUNGLE - FIGHTER DIVER"
	no-loop
	when
		$playerData: PlayerGenerativeData(playerPosition == MapPositionsEnum.JUNGLE)
		$enemyChamp: ChampionsAndRoles(playedPositions contains MapPositionsEnum.JUNGLE && 
										(mainRole contains ChampionRolesEnum.SLAYER),
						  				  $enemyStats: champion.stats) from $playerData.opponentTeam
		AllChampionsAndRoles($allChampions: allChampions)
		accumulate(
			ChampionsAndRoles(
				$champion: champion,
				$stats: champion.stats,
				name != $enemyChamp.name && playedPositions contains MapPositionsEnum.JUNGLE &&
				(subroles contains ChampionRolesEnum.DIVER)
			) from $allChampions,
			$list: collectList($champion)) 
	then
		System.out.println("Player plays JUNGLE, oponnents have a SLAYER JUNGLE - FIGHTER DIVER");
		recommendations.addAll($list);
end

rule "Player plays MID, oponnents have a SPECIALIST - SLAYER MID"
	no-loop
	when
		$playerData: PlayerGenerativeData(playerPosition == MapPositionsEnum.MID)
		$enemyChamp: ChampionsAndRoles(playedPositions contains MapPositionsEnum.MID && 
										(mainRole contains ChampionRolesEnum.SPECIALIST),
						  				  $enemyStats: champion.stats) from $playerData.opponentTeam
		AllChampionsAndRoles($allChampions: allChampions)
		accumulate(
			ChampionsAndRoles(
				$champion: champion,
				$stats: champion.stats,
				name != $enemyChamp.name && playedPositions contains MapPositionsEnum.MID &&
				(mainRole contains ChampionRolesEnum.SLAYER)
			) from $allChampions,
			$list: collectList($champion)) 
	then
		System.out.println("Player plays MID, oponnents have a SPECIALIST - SLAYER MID");
		recommendations.addAll($list);
end

rule "Player plays MID, oponnents have a MAGE MID - ASSASSIN MID"
	no-loop
	when
		$playerData: PlayerGenerativeData(playerPosition == MapPositionsEnum.MID)
		$enemyChamp: ChampionsAndRoles(playedPositions contains MapPositionsEnum.MID && 
										(mainRole contains ChampionRolesEnum.MAGE),
						  				  $enemyStats: champion.stats) from $playerData.opponentTeam
		AllChampionsAndRoles($allChampions: allChampions)
		accumulate(
			ChampionsAndRoles(
				$champion: champion,
				$stats: champion.stats,
				name != $enemyChamp.name && playedPositions contains MapPositionsEnum.MID &&
				(subroles contains ChampionRolesEnum.ASSASSIN)
			) from $allChampions,
			$list: collectList($champion)) 
	then
		System.out.println("Player plays MID, oponnents have a MAGE MID - ASSASSIN MID");
		recommendations.addAll($list);
end

rule "Player plays MID, oponnents have a SLAYER MID - SPECIALIST/TANK/MAGE CONTROLLER"
	no-loop
	when
		$playerData: PlayerGenerativeData(playerPosition == MapPositionsEnum.MID)
		$enemyChamp: ChampionsAndRoles(playedPositions contains MapPositionsEnum.MID && 
										(mainRole contains ChampionRolesEnum.SLAYER),
						  				  $enemyStats: champion.stats) from $playerData.opponentTeam
		AllChampionsAndRoles($allChampions: allChampions)
		accumulate(
			ChampionsAndRoles(
				$champion: champion,
				$stats: champion.stats,
				name != $enemyChamp.name && playedPositions contains MapPositionsEnum.MID &&
				(subroles contains ChampionRolesEnum.SPECIALIST || 
				 mainRole contains ChampionRolesEnum.TANK ||
				 (mainRole contains ChampionRolesEnum.MAGE && mainRole contains ChampionRolesEnum.CONTROLLER))
			) from $allChampions,
			$list: collectList($champion))
	then
		System.out.println("Player plays MID, oponnents have a SLAYER MID - SPECIALIST/TANK/MAGE CONTROLLER");
		recommendations.addAll($list);
end