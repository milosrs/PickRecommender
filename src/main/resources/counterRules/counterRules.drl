//created on: Aug 12, 2018
package counterRules;

//list any import classes here.
import java.lang.System;

import com.lol.facts.PlayerPicksFirst;
import com.lol.facts.AllChampionsAndRoles;

import com.lol.model.ChampionRolesEnum;
import com.lol.model.MapPositionsEnum;
import com.lol.model.TeamTypesEnum;
import com.lol.model.champions.Champion;
import com.lol.model.champions.Stats;
import com.lol.model.champions.ChampionsAndRoles;
import com.lol.model.championMastery.ChampionMasteryDto;
import com.lol.model.recommendation.PlayerGenerativeData;
import com.lol.requestSender.ChampionMasteryRequestSender;
import com.lol.model.summoner.SummonerDto;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
 
//declare any global variables here
global List<Champions> recommendations;
global ChampionMasteryRequestSender championMasteryRequestSender;
global List<ChampionsAndRoles> allChampions;

rule "If player has first pick, recommend his best for that position"
	no-loop
    when
        PlayerGenerativeData(firstPick == TeamTypesEnum.FRIENDLY && playerPosition == friendlyTeamPositionOrder[0])
        $summoner: SummonerDto()
        $allChampions: AllChampionsAndRoles(allChampions.size > 0)
    then
        List<ChampionMasteryDto> champsWithExp = championMasteryRequestSender.sendRequest($summoner.getId());
        List<ChampionsAndRoles> extractedChamps = new ArrayList<ChampionsAndRoles>();
        PlayerPicksFirst fact = new PlayerPicksFirst();
        
        for(ChampionMasteryDto cm : champsWithExp) {
        	if(cm.getChampionLevel() > 2) {
        		for(ChampionsAndRoles champ : $allChampions.getAllChampions()) {
        			if(champ.getChampion().getId() == cm.getChampionId()) {
        				extractedChamps.add(champ);
        			}
        		}
        	}
        }
        
        fact.setChamps(extractedChamps);
        insert(fact);
        update(fact);
end

rule "Get champions played for player position"
	when
		$playerData: PlayerGenerativeData()
		$extractedChamps: PlayerPicksFirst(champs.size > 0)
	then
		for(ChampionsAndRoles champ : $extractedChamps.getChamps()) {
			if(champ.getPlayedPositions().contains($playerData.getPlayerPosition())) {
				recommendations.add(champ.getChampion());
			}
		}
end

rule "Player plays bottom, oponnents picked a marksman"
	when
		$playerData: PlayerGenerativeData(playerPosition == MapPositionsEnum.BOTTOM)
		$enemyMarksman: ChampionsAndRoles(playedPositions contains MapPositionsEnum.BOTTOM) from $playerData.opponentTeam
		$acar: AllChampionsAndRoles()
	then
		for(ChampionsAndRoles charo: $acar.getAllChampions()) {
			if(charo.getPlayedPositions().contains(MapPositionsEnum.BOTTOM)) {
				Champion champ = charo.getChampion();
				Champion enemy = $enemyMarksman.getChampion();
				Stats stats = champ.getStats();
				Stats enemyStats = enemy.getStats();
				
				double totalAd = stats.getAttackdamage() + stats.getAttackdamageperlevel() * 18;
				double range = stats.getAttackrange();
				double hpEarlyGame = stats.getHp() + stats.getHpperlevel() * 8;
				
				double totalAdEnemy = enemyStats.getAttackdamage() + enemyStats.getAttackdamageperlevel() * 18;
				double rangeEnemy = enemyStats.getAttackrange();
				double hpEarlyGameEnemy = enemyStats.getHp() + enemyStats.getHpperlevel() * 8;
				
				if((totalAd > totalAdEnemy && range > rangeEnemy) || (totalAd > totalAdEnemy && hpEarlyGame > hpEarlyGameEnemy) ||
					(totalAd > totalAdEnemy && range > rangeEnemy && hpEarlyGame > hpEarlyGameEnemy) ||
					(range > rangeEnemy)) {
					recommendations.add(champ);
				}
			}
		}
end