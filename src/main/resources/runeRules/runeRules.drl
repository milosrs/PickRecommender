package runeRules

import java.lang.System;
import com.lol.model.champions.ChampionsAndRoles;
import com.lol.model.ChampionRolesEnum;
import com.lol.model.MapPositionsEnum;
import com.lol.model.TeamTypesEnum;
import com.lol.model.champions.Champion;
import com.lol.model.reforgedRunes.ReforgedRuneDto;
import com.lol.model.reforgedRunes.ReforgedRunePathDto;
import com.lol.model.reforgedRunes.ReforgedRuneSlotDto;
import com.lol.model.recommendation.RuneRecommendation;
import com.lol.facts.RunesNames;
import com.lol.util.Utils;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.Arrays;

global List<ReforgedRuneDto> primary;
global List<ReforgedRuneDto> secondary;
global String primaryName;
global String secondaryName;
global Utils util;
global List<ReforgedRunePathDto> allRunes;

rule "Player bottom - Marksman -> Precision + Sorcery"
	when
		$fact: RunesNames()
		$playerPosition: MapPositionsEnum(value == MapPositionsEnum.BOTTOM)
		$champ: ChampionsAndRoles(playedPositions contains $playerPosition &&
								  mainRole contains ChampionRolesEnum.MARKSMAN)
	then
		primaryName = "Precision";
		secondaryName = "Sorcery";
		$fact.setPrimaryName(primaryName);
		$fact.setSecondaryName(secondaryName);
		List<String> primaryRuneNames = Arrays.asList("FleetFootwork", "PresenceOfMind", "LegendAlacrity", "CoupDeGrace");
		List<String> secondaryRuneNames = Arrays.asList("Celerity", "GatheringStorm");
		int i = 0;
		
		for(String runeName : primaryRuneNames) {
			primary.add(util.getRunesFromPathAndLevel(i++, primaryName, runeName));
		}
		
		secondary.add(util.getRunesFromPathAndLevel(2, secondaryName, secondaryRuneNames.get(0)));
		secondary.add(util.getRunesFromPathAndLevel(3, secondaryName, secondaryRuneNames.get(1)));
end

rule "Player support - tank or tanky catcher -> Resolve + Inspiration"
	when
		$fact: RunesNames()
		$playerPosition: MapPositionsEnum(value == MapPositionsEnum.SUPPORT)
		$champ: ChampionsAndRoles(playedPositions contains $playerPosition &&
								  mainRole contains ChampionRolesEnum.TANK || 
								  	(mainRole contains ChampionRolesEnum.TANK && 
								  	 mainRole contains ChampionRolesEnum.CONTROLLER &&
								  	 subroles contains ChampionRolesEnum.CATCHER))
	then
		primaryName = "Resolve";
		secondaryName = "Inspiration";
		$fact.setPrimaryName(primaryName);
		$fact.setSecondaryName(secondaryName);
		List<String> primaryRuneNames = Arrays.asList("GraspOfTheUndying", "Demolish", "SecondWind", "Unflinching");
		List<String> secondaryRuneNames = Arrays.asList("FuturesMarket", "CosmicInsight");
		int i = 0;
		
		for(String runeName : primaryRuneNames) {
			primary.add(util.getRunesFromPathAndLevel(i++, primaryName, runeName));
		}
		
		secondary.add(util.getRunesFromPathAndLevel(2, secondaryName, secondaryRuneNames.get(0)));
		secondary.add(util.getRunesFromPathAndLevel(3, secondaryName, secondaryRuneNames.get(1)));
end

rule "Player support - Enchanter Controller only -> Resolve + Magic"
	when
		$fact: RunesNames()
		$playerPosition: MapPositionsEnum(value == MapPositionsEnum.SUPPORT)
		$champ: ChampionsAndRoles(playedPositions contains $playerPosition &&
								  mainRole contains ChampionRolesEnum.CONTROLLER && mainRole.size == 1 && 
								  subroles contains ChampionRolesEnum.ENCHANTER)
	then
		primaryName = "Resolve";
		secondaryName = "Sorcery";
		$fact.setPrimaryName(primaryName);
		$fact.setSecondaryName(secondaryName);
		List<String> primaryRuneNames = Arrays.asList("Guardian", "BonePlating", "SecondWind", "Revitalize");
		List<String> secondaryRuneNames = Arrays.asList("BiscuitDelivery", "CosmicInsight");
		int i = 0;
		
		for(String runeName : primaryRuneNames) {
			primary.add(util.getRunesFromPathAndLevel(i++, primaryName, runeName));
		}
		
		secondary.add(util.getRunesFromPathAndLevel(2, secondaryName, secondaryRuneNames.get(0)));
		secondary.add(util.getRunesFromPathAndLevel(3, secondaryName, secondaryRuneNames.get(1)));
end

rule "Player support - Catcher Controller only or Controller Slayer -> Domination + Magical Ignite"
	when
		$fact: RunesNames()
		$playerPosition: MapPositionsEnum(value == MapPositionsEnum.SUPPORT)
		$champ: ChampionsAndRoles(playedPositions contains $playerPosition &&
								  (mainRole contains ChampionRolesEnum.CONTROLLER && mainRole.size == 1 && subroles contains ChampionRolesEnum.CATCHER) ||
								  (mainRole contains ChampionRolesEnum.CONTROLLER && mainRole contains ChampionRolesEnum.SLAYER && subroles contains ChampionRolesEnum.CATCHER))  
	then
		primaryName = "Domination";
		secondaryName = "Sorcery";
		$fact.setPrimaryName(primaryName);
		$fact.setSecondaryName(secondaryName);
		List<String> primaryRuneNames = Arrays.asList("Electrocute", "TasteOfBlood", "ZombieWard", "UltimateHunter");
		List<String> secondaryRuneNames = Arrays.asList("ManaflowBand", "Scorch");
		int i = 0;
		
		for(String runeName : primaryRuneNames) {
			primary.add(util.getRunesFromPathAndLevel(i++, primaryName, runeName));
		}
		
		secondary.add(util.getRunesFromPathAndLevel(1, secondaryName, secondaryRuneNames.get(0)));
		secondary.add(util.getRunesFromPathAndLevel(3, secondaryName, secondaryRuneNames.get(1)));
end

rule "Player support - mage controller -> Magic + Inspiration"
	when
		$fact: RunesNames()
		$playerPosition: MapPositionsEnum(value == MapPositionsEnum.SUPPORT)
		$champ: ChampionsAndRoles(playedPositions contains $playerPosition &&
								  (mainRole contains ChampionRolesEnum.CONTROLLER && mainRole contains ChampionRolesEnum.MAGE))
	then
		primaryName = "Sorcery";
		secondaryName = "Inspiration";
		$fact.setPrimaryName(primaryName);
		$fact.setSecondaryName(secondaryName);
		List<String> primaryRuneNames = Arrays.asList("ArcaneComet", "NimbusCloak", "Transcendence", "Scorch");
		List<String> secondaryRuneNames = Arrays.asList("BiscuitDelivery", "CosmicInsight");
		int i = 0;
		
		for(String runeName : primaryRuneNames) {
			primary.add(util.getRunesFromPathAndLevel(i++, primaryName, runeName));
		}
		
		secondary.add(util.getRunesFromPathAndLevel(2, secondaryName, secondaryRuneNames.get(0)));
		secondary.add(util.getRunesFromPathAndLevel(3, secondaryName, secondaryRuneNames.get(1)));
end

rule "Player support - specialist -> Magic + Inspiration"
	when
		$fact: RunesNames()
		$playerPosition: MapPositionsEnum(value == MapPositionsEnum.SUPPORT)
		$champ: ChampionsAndRoles(playedPositions contains $playerPosition &&
								  mainRole contains ChampionRolesEnum.SPECIALIST)
	then
		primaryName = "Sorcery";
		secondaryName = "Inspiration";
		$fact.setPrimaryName(primaryName);
		$fact.setSecondaryName(secondaryName);
		List<String> primaryRuneNames = Arrays.asList("ArcaneComet", "NimbusCloak", "Transcendence", "Scorch");
		List<String> secondaryRuneNames = Arrays.asList("BiscuitDelivery", "CosmicInsight");
		int i = 0;
		
		for(String runeName : primaryRuneNames) {
			primary.add(util.getRunesFromPathAndLevel(i++, primaryName, runeName));
		}
		
		secondary.add(util.getRunesFromPathAndLevel(2, secondaryName, secondaryRuneNames.get(0)));
		secondary.add(util.getRunesFromPathAndLevel(3, secondaryName, secondaryRuneNames.get(1)));
end

rule "Player top - Fighter Diver -> Accuracy + Resolve (Tower crusher)"
	when
		$fact: RunesNames()
		$playerPosition: MapPositionsEnum(value == MapPositionsEnum.TOP)
		$champ: ChampionsAndRoles(playedPositions contains $playerPosition &&
								  mainRole contains ChampionRolesEnum.FIGHTER &&
								  subroles contains ChampionRolesEnum.DIVER)
	then
		primaryName = "Precision";
		secondaryName = "Resolve";
		$fact.setPrimaryName(primaryName);
		$fact.setSecondaryName(secondaryName);
		List<String> primaryRuneNames = Arrays.asList("Conqueror", "Triumph", "LegendBloodline", "LastStand");
		List<String> secondaryRuneNames = Arrays.asList("Demolish", "Overgrowth");
		int i = 0;
		
		for(String runeName : primaryRuneNames) {
			primary.add(util.getRunesFromPathAndLevel(i++, primaryName, runeName));
		}
		
		secondary.add(util.getRunesFromPathAndLevel(1, secondaryName, secondaryRuneNames.get(0)));
		secondary.add(util.getRunesFromPathAndLevel(3, secondaryName, secondaryRuneNames.get(1)));
end

rule "Player top - Fighter Juggernaut -> Inspiration + Resolve (Tower crusher)"
	when
		$fact: RunesNames()
		$playerPosition: MapPositionsEnum(value == MapPositionsEnum.TOP)
		$champ: ChampionsAndRoles(playedPositions contains $playerPosition &&
								  mainRole contains ChampionRolesEnum.FIGHTER &&
								  subroles contains ChampionRolesEnum.JUGGERNAUT)
	then
		primaryName = "Inspiration";
		secondaryName = "Resolve";
		$fact.setPrimaryName(primaryName);
		$fact.setSecondaryName(secondaryName);
		List<String> primaryRuneNames = Arrays.asList("Kleptomancy", "MagicalFootwear", "MinionDematerializer", "TimeWarpTonic");
		List<String> secondaryRuneNames = Arrays.asList("Demolish", "Overgrowth");
		int i = 0;
		
		for(String runeName : primaryRuneNames) {
			primary.add(util.getRunesFromPathAndLevel(i++, primaryName, runeName));
		}
		
		secondary.add(util.getRunesFromPathAndLevel(1, secondaryName, secondaryRuneNames.get(0)));
		secondary.add(util.getRunesFromPathAndLevel(3, secondaryName, secondaryRuneNames.get(1)));
end

rule "Player top - SPECIALIST top exclusive -> Inspiration + Resolve (Tower crusher)"
	when
		$fact: RunesNames()
		$playerPosition: MapPositionsEnum(value == MapPositionsEnum.TOP)
		$champ: ChampionsAndRoles(playedPositions contains $playerPosition && playedPositions.size == 1 &&
								  mainRole contains ChampionRolesEnum.SPECIALIST)
	then
		primaryName = "Inspiration";
		secondaryName = "Resolve";
		$fact.setPrimaryName(primaryName);
		$fact.setSecondaryName(secondaryName);
		List<String> primaryRuneNames = Arrays.asList("Kleptomancy", "MagicalFootwear", "MinionDematerializer", "TimeWarpTonic");
		List<String> secondaryRuneNames = Arrays.asList("Demolish", "Overgrowth");
		int i = 0;
		
		for(String runeName : primaryRuneNames) {
			primary.add(util.getRunesFromPathAndLevel(i++, primaryName, runeName));
		}
		
		secondary.add(util.getRunesFromPathAndLevel(1, secondaryName, secondaryRuneNames.get(0)));
		secondary.add(util.getRunesFromPathAndLevel(3, secondaryName, secondaryRuneNames.get(1)));
end

rule "Player top or mid - SPECIALIST top and mid -> Magic aery + Accuracy(AS + DMG>HP)"
	when
		$fact: RunesNames()
		$playerPosition: MapPositionsEnum(value == MapPositionsEnum.TOP || value == MapPositionsEnum.MID)
		$champ: ChampionsAndRoles(playedPositions contains $playerPosition && playedPositions contains MapPositionsEnum.MID &&
								  mainRole contains ChampionRolesEnum.SPECIALIST && playedPositions not contains MapPositionsEnum.BOTTOM)
	then
		primaryName = "Sorcery";
		secondaryName = "Precision";
		$fact.setPrimaryName(primaryName);
		$fact.setSecondaryName(secondaryName);
		List<String> primaryRuneNames = Arrays.asList("SummonAery", "ManaflowBand", "Transcendence", "GatheringStorm");
		List<String> secondaryRuneNames = Arrays.asList("LegendAlacrity", "CutDown");
		int i = 0;
		
		for(String runeName : primaryRuneNames) {
			primary.add(util.getRunesFromPathAndLevel(i++, primaryName, runeName));
		}
		
		secondary.add(util.getRunesFromPathAndLevel(2, secondaryName, secondaryRuneNames.get(0)));
		secondary.add(util.getRunesFromPathAndLevel(3, secondaryName, secondaryRuneNames.get(1)));
end

rule "Player top or mid - MAGE or CONTROLLER -> Magic aery + Inspiration(dematerializer + cdr)"
	when
		$fact: RunesNames()
		$playerPosition: MapPositionsEnum(value == MapPositionsEnum.TOP || value == MapPositionsEnum.MID)
		$champ: ChampionsAndRoles(playedPositions contains $playerPosition &&
								  (mainRole contains ChampionRolesEnum.MAGE || mainRole contains ChampionRolesEnum.CONTROLLER))  
	then
		primaryName = "Sorcery";
		secondaryName = "Inspiration";
		$fact.setPrimaryName(primaryName);
		$fact.setSecondaryName(secondaryName);
		List<String> primaryRuneNames = Arrays.asList("SummonAery", "ManaflowBand", "Transcendence", "GatheringStorm");
		List<String> secondaryRuneNames = Arrays.asList("MinionDematerializer", "CosmicInsight");
		int i = 0;
		
		for(String runeName : primaryRuneNames) {
			primary.add(util.getRunesFromPathAndLevel(i++, primaryName, runeName));
		}
		
		secondary.add(util.getRunesFromPathAndLevel(2, secondaryName, secondaryRuneNames.get(0)));
		secondary.add(util.getRunesFromPathAndLevel(3, secondaryName, secondaryRuneNames.get(1)));
end

rule "Player top or mid - SLAYER SKRIMISHER -> Accuracy + Domination"
	when
		$fact: RunesNames()
		$playerPosition: MapPositionsEnum(value == MapPositionsEnum.TOP || value == MapPositionsEnum.MID)
		$champ: ChampionsAndRoles(playedPositions contains $playerPosition &&
								  mainRole contains ChampionRolesEnum.SLAYER &&
								  subroles contains ChampionRolesEnum.SKRIMISHER)  
	then
		primaryName = "Precision";
		secondaryName = "Domination";
		$fact.setPrimaryName(primaryName);
		$fact.setSecondaryName(secondaryName);
		List<String> primaryRuneNames = Arrays.asList("LethalTempo", "PresenceOfMind", "LegendBloodline", "CoupDeGrace");
		List<String> secondaryRuneNames = Arrays.asList("SuddenImpact", "RavenousHunter");
		int i = 0;
		
		for(String runeName : primaryRuneNames) {
			primary.add(util.getRunesFromPathAndLevel(i++, primaryName, runeName));
		}
		
		secondary.add(util.getRunesFromPathAndLevel(1, secondaryName, secondaryRuneNames.get(0)));
		secondary.add(util.getRunesFromPathAndLevel(3, secondaryName, secondaryRuneNames.get(1)));
end

rule "Player top or mid - SLAYER ASSASSIN -> Domination + Accuracy"
	when
		$fact: RunesNames()
		$playerPosition: MapPositionsEnum(value == MapPositionsEnum.TOP || value == MapPositionsEnum.MID)
		$champ: ChampionsAndRoles(playedPositions contains $playerPosition &&
								  mainRole contains ChampionRolesEnum.SLAYER &&
								  subroles contains ChampionRolesEnum.ASSASSIN)  
	then
		primaryName = "Domination";
		secondaryName = "Precision";
		$fact.setPrimaryName(primaryName);
		$fact.setSecondaryName(secondaryName);
		List<String> primaryRuneNames = Arrays.asList("Electrocute", "SuddenImpact", "GhostPoro", "RavenousHunter");
		List<String> secondaryRuneNames = Arrays.asList("LegendBloodline", "CoupDeGrace");
		int i = 0;
		
		for(String runeName : primaryRuneNames) {
			primary.add(util.getRunesFromPathAndLevel(i++, primaryName, runeName));
		}
		
		secondary.add(util.getRunesFromPathAndLevel(2, secondaryName, secondaryRuneNames.get(0)));
		secondary.add(util.getRunesFromPathAndLevel(3, secondaryName, secondaryRuneNames.get(1)));
end

rule "Player top - TANK top -> Resolve(Lifesteal + Crusher) + Inspiration(Dematerializer + CDR)"
	when
		$fact: RunesNames()
		$playerPosition: MapPositionsEnum(value == MapPositionsEnum.TOP)
		$champ: ChampionsAndRoles(playedPositions contains $playerPosition &&
								  mainRole contains ChampionRolesEnum.TANK)
	then
		primaryName = "Resolve";
		secondaryName = "Inspiration";
		$fact.setPrimaryName(primaryName);
		$fact.setSecondaryName(secondaryName);
		List<String> primaryRuneNames = Arrays.asList("GraspOfTheUndying", "Demolish", "Conditioning", "Overgrowth");
		List<String> secondaryRuneNames = Arrays.asList("MinionDematerializer", "CosmicInsight");
		int i = 0;
		
		for(String runeName : primaryRuneNames) {
			primary.add(util.getRunesFromPathAndLevel(i++, primaryName, runeName));
		}
		
		secondary.add(util.getRunesFromPathAndLevel(2, secondaryName, secondaryRuneNames.get(0)));
		secondary.add(util.getRunesFromPathAndLevel(3, secondaryName, secondaryRuneNames.get(1)));
end

rule "Player top or mid - SPECIALIST + MARKSMAN -> Accuracy(Footwork) + Domination(Lifesteal + Ult CDR)"
	when
		$fact: RunesNames()
		$playerPosition: MapPositionsEnum(value == MapPositionsEnum.TOP || value == MapPositionsEnum.MID)
		$champ: ChampionsAndRoles(playedPositions contains $playerPosition &&
								  mainRole contains ChampionRolesEnum.SPECIALIST && mainRole contains ChampionRolesEnum.MARKSMAN)  
	then
		primaryName = "Precision";
		secondaryName = "Domination";
		$fact.setPrimaryName(primaryName);
		$fact.setSecondaryName(secondaryName);
		List<String> primaryRuneNames = Arrays.asList("FleetFootwork", "PresenceOfMind", "LegendAlacrity", "CoupDeGrace");
		List<String> secondaryRuneNames = Arrays.asList("TasteOfBlood", "UltimateHunter");
		int i = 0;
		
		for(String runeName : primaryRuneNames) {
			primary.add(util.getRunesFromPathAndLevel(i++, primaryName, runeName));
		}
		
		secondary.add(util.getRunesFromPathAndLevel(1, secondaryName, secondaryRuneNames.get(0)));
		secondary.add(util.getRunesFromPathAndLevel(3, secondaryName, secondaryRuneNames.get(1)));
end

rule "Player jungle - TANK -> Resolve + Domination"
	when
		$fact: RunesNames()
		$playerPosition: MapPositionsEnum(value == MapPositionsEnum.JUNGLE)
		$champ: ChampionsAndRoles(playedPositions contains $playerPosition &&
								  mainRole contains ChampionRolesEnum.TANK)  
	then
		primaryName = "Resolve";
		secondaryName = "Domination";
		$fact.setPrimaryName(primaryName);
		$fact.setSecondaryName(secondaryName);
		List<String> primaryRuneNames = Arrays.asList("GraspOfTheUndying", "Demolish", "Conditioning", "Unflinching");
		List<String> secondaryRuneNames = Arrays.asList("SuddenImpact", "EyeballCollection");
		int i = 0;
		
		for(String runeName : primaryRuneNames) {
			primary.add(util.getRunesFromPathAndLevel(i++, primaryName, runeName));
		}
		
		secondary.add(util.getRunesFromPathAndLevel(1, secondaryName, secondaryRuneNames.get(0)));
		secondary.add(util.getRunesFromPathAndLevel(2, secondaryName, secondaryRuneNames.get(1)));
end


rule "Player jungle - FIGHTER -> Accuracy + Domination"
	when
		$fact: RunesNames()
		$playerPosition: MapPositionsEnum(value == MapPositionsEnum.JUNGLE)
		$champ: ChampionsAndRoles(playedPositions contains $playerPosition &&
								  mainRole contains ChampionRolesEnum.FIGHTER)  
	then
		primaryName = "Precision";
		secondaryName = "Domination";
		$fact.setPrimaryName(primaryName);
		$fact.setSecondaryName(secondaryName);
		List<String> primaryRuneNames = Arrays.asList("PressTheAttack", "Triumph", "LegendBloodline", "CoupDeGrace");
		List<String> secondaryRuneNames = Arrays.asList("SuddenImpact", "UltimateHunter");
		int i = 0;
		
		for(String runeName : primaryRuneNames) {
			primary.add(util.getRunesFromPathAndLevel(i++, primaryName, runeName));
		}
		
		secondary.add(util.getRunesFromPathAndLevel(1, secondaryName, secondaryRuneNames.get(0)));
		secondary.add(util.getRunesFromPathAndLevel(3, secondaryName, secondaryRuneNames.get(1)));
end

rule "Player jungle - SLAYER -> Domination + Accuracy"
	when
		$fact: RunesNames()
		$playerPosition: MapPositionsEnum(value == MapPositionsEnum.JUNGLE)
		$champ: ChampionsAndRoles(playedPositions contains $playerPosition &&
								  mainRole contains ChampionRolesEnum.SLAYER) 
	then
		primaryName = "Domination";
		secondaryName = "Precision";
		$fact.setPrimaryName(primaryName);
		$fact.setSecondaryName(secondaryName);
		List<String> primaryRuneNames = Arrays.asList("Electrocute", "SuddenImpact", "GhostPoro", "RelentlessHunter");
		List<String> secondaryRuneNames = Arrays.asList("LegendBloodline", "CoupDeGrace");
		int i = 0;
		
		for(String runeName : primaryRuneNames) {
			primary.add(util.getRunesFromPathAndLevel(i++, primaryName, runeName));
		}
		
		secondary.add(util.getRunesFromPathAndLevel(2, secondaryName, secondaryRuneNames.get(0)));
		secondary.add(util.getRunesFromPathAndLevel(3, secondaryName, secondaryRuneNames.get(1)));
end

rule "Player jungle - Specialist Marksman -> Domination + Accuracy"
	when
		$fact: RunesNames()
		$playerPosition: MapPositionsEnum(value == MapPositionsEnum.JUNGLE)
		$champ: ChampionsAndRoles(playedPositions contains $playerPosition &&
								  mainRole contains ChampionRolesEnum.SPECIALIST &&
								  mainRole contains ChampionRolesEnum.MARKSMAN)
	then
		primaryName = "Domination";
		secondaryName = "Precision";
		$fact.setPrimaryName(primaryName);
		$fact.setSecondaryName(secondaryName);
		List<String> primaryRuneNames = Arrays.asList("DarkHarvest", "TasteOfBlood", "GhostPoro", "RelentlessHunter");
		List<String> secondaryRuneNames = Arrays.asList("LegendAlacrity", "CoupDeGrace");
		int i = 0;
		
		for(String runeName : primaryRuneNames) {
			primary.add(util.getRunesFromPathAndLevel(i++, primaryName, runeName));
		}
		
		secondary.add(util.getRunesFromPathAndLevel(2, secondaryName, secondaryRuneNames.get(0)));
		secondary.add(util.getRunesFromPathAndLevel(3, secondaryName, secondaryRuneNames.get(1)));
end

rule "Player jungle - MAGE -> Domination + Magic"
	when
		$fact: RunesNames()
		$playerPosition: MapPositionsEnum(value == MapPositionsEnum.JUNGLE)
		$champ: ChampionsAndRoles(playedPositions contains $playerPosition &&
								  mainRole contains ChampionRolesEnum.MAGE)
	then
		primaryName = "Domination";
		secondaryName = "Sorcery";
		$fact.setPrimaryName(primaryName);
		$fact.setSecondaryName(secondaryName);
		List<String> primaryRuneNames = Arrays.asList("Predator", "TasteOfBlood", "GhostPoro", "RavenousHunter");
		List<String> secondaryRuneNames = Arrays.asList("ManaflowBand", "Waterwalking");
		int i = 0;
		
		for(String runeName : primaryRuneNames) {
			primary.add(util.getRunesFromPathAndLevel(i++, primaryName, runeName));
		}
		
		secondary.add(util.getRunesFromPathAndLevel(1, secondaryName, secondaryRuneNames.get(0)));
		secondary.add(util.getRunesFromPathAndLevel(3, secondaryName, secondaryRuneNames.get(1)));
end